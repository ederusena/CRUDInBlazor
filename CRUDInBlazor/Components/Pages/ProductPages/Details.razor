@page "/products/details"

@using Microsoft.EntityFrameworkCore
@using CRUDInBlazor.Models
@inject IDbContextFactory<CRUDInBlazor.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Detalhes Produto</PageTitle>

<h1>Detalhes</h1>

<div>
    <h4>Produto</h4>
    <hr />
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@product.Name</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@product.Price</dd>
            <dt class="col-sm-2">Qty</dt>
            <dd class="col-sm-10">@product.Qty</dd>
        </dl>
        <div>
            <a href="@($"/products/edit?id={product.Id}")">Editar</a> |
            <a href="@($"/products")">Voltar a lista</a>
        </div>
    }
</div>

@code {
    Product? product;

    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
